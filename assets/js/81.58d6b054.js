(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{352:function(n,o,c){"use strict";c.r(o);var t=c(14),l=Object(t.a)({},(function(){var n=this.$createElement,o=this._self._c||n;return o("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[o("h3",{attrs:{id:"var、let、const共同点"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#var、let、const共同点"}},[this._v("#")]),this._v(" var、let、const共同点")]),this._v(" "),o("p",[this._v("示例：")]),this._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[this._v("// console.log(abc) //外部不可以访问内部函数变量，内部函数的声明的变量属于私有空间，会报undefined\n// function func() {\n//     let abc = '123';\n// }\n// func()\n\n// let abc = '111'\n// function funa() {\n//     abc = '123';\n//     console.log(abc) //123，内部函数可以修改外部声明变量的值，无论是var还是let声明的\n// }\n// funa()\n// console.log(abc)\n\n// let abc = '111'\n// function funa() {\n//     let abc = '123';\n//     console.log(abc) //123，如果内部函数中声明了相同变量，相当于声明一个私有的空间，与外部互不影响，因为不在一个作用域内。\n// }\n// funa()\n// console.log(abc) //111\n\n// let abcd = '234';\n// function show() {\n//     let abc = '456';\n//     function run() {\n//         console.log(abc); //456 如果函数内部没有声明这个变量，则会向外部去找，直到找到为止。\n//     }\n//     run()\n// }\n// show();\n\n// let abcd = '234';\n// function show() {\n//     let abc = '456';\n//     function run() {\n//         console.log(abc); //456如果函数内部没有声明这个变量，则会向外部去找，直到找到为止。\n//         console.log(abcd) //234\n//     }\n//     run()\n// }\n// show();\n\nlet abc = '234';\nfunction show() {\n    let abc = '456';\n    function run() {\n        abcd = '888'\n        console.log(\"1\",abcd) //888 //第二个打印\n    }\n    run()\n    console.log(\"2\",abc) //456 //第三个打印\n}\nconsole.log(\"3\",abc) //234  //第一个打印,由于代码从上到下执行，console.log(\"3\",abc)在show()前面，所以console.log(\"3\",abc)先被打印，然后函数内部执行顺序是从内到外执行，所以先执行run()，再最后执行show()\nshow();")])])])])}),[],!1,null,null,null);o.default=l.exports}}]);